package mocks

import (
	context "context"
	"github.com/sing3demons/go-backend-clean-architecture/mongo"
	mock "github.com/stretchr/testify/mock"
	mongo_mock "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// Collection is an autogenerated mock type for the Collection type
type Collection struct {
	mock.Mock
}

// Aggregate provides a mock function with given fields: a0, a1
func (_m *Collection) Aggregate(a0 context.Context, a1 interface{}) (mongo.Cursor, error) {
	ret := _m.Called(a0, a1)

	var r0 mongo.Cursor
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) mongo.Cursor); ok {
		r0 = rf(a0, a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.Cursor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(a0, a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountDocuments provides a mock function with given fields: a0, a1, a2
func (_m *Collection) CountDocuments(a0 context.Context, a1 interface{}, a2 ...*options.CountOptions) (int64, error) {
	va := make([]interface{}, len(a2))
	for _i := range a2 {
		va[_i] = a2[_i]
	}
	var ca []interface{}
	ca = append(ca, a0, a1)
	ca = append(ca, va...)
	ret := _m.Called(ca...)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.CountOptions) int64); ok {
		r0 = rf(a0, a1, a2...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.CountOptions) error); ok {
		r1 = rf(a0, a1, a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOne provides a mock function with given fields: a0, a1
func (_m *Collection) DeleteOne(a0 context.Context, a1 interface{}) (int64, error) {
	ret := _m.Called(a0, a1)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) int64); ok {
		r0 = rf(a0, a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(a0, a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: a0, a1, a2
func (_m *Collection) Find(a0 context.Context, a1 interface{}, a2 ...*options.FindOptions) (mongo.Cursor, error) {
	va := make([]interface{}, len(a2))
	for _i := range a2 {
		va[_i] = a2[_i]
	}
	var ca []interface{}
	ca = append(ca, a0, a1)
	ca = append(ca, va...)
	ret := _m.Called(ca...)

	var r0 mongo.Cursor
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.FindOptions) mongo.Cursor); ok {
		r0 = rf(a0, a1, a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.Cursor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.FindOptions) error); ok {
		r1 = rf(a0, a1, a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: a0, a1
func (_m *Collection) FindOne(a0 context.Context, a1 interface{}) mongo.SingleResult {
	ret := _m.Called(a0, a1)

	var r0 mongo.SingleResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) mongo.SingleResult); ok {
		r0 = rf(a0, a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.SingleResult)
		}
	}

	return r0
}

// InsertMany provides a mock function with given fields: a0, a1
func (_m *Collection) InsertMany(a0 context.Context, a1 []interface{}) ([]interface{}, error) {
	ret := _m.Called(a0, a1)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(context.Context, []interface{}) []interface{}); ok {
		r0 = rf(a0, a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []interface{}) error); ok {
		r1 = rf(a0, a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOne provides a mock function with given fields: a0, a1
func (_m *Collection) InsertOne(a0 context.Context, a1 interface{}) (interface{}, error) {
	ret := _m.Called(a0, a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) interface{}); ok {
		r0 = rf(a0, a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(a0, a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMany provides a mock function with given fields: a0, a1, a2, a3
func (_m *Collection) UpdateMany(a0 context.Context, a1, a2 interface{}, a3 ...*options.UpdateOptions) (*mongo_mock.UpdateResult, error) {
	va := make([]interface{}, len(a3))
	for _i := range a3 {
		va[_i] = a3[_i]
	}
	var ca []interface{}
	ca = append(ca, a0, a1, a2)
	ca = append(ca, va...)
	ret := _m.Called(ca...)

	var r0 *mongo_mock.UpdateResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) *mongo_mock.UpdateResult); ok {
		r0 = rf(a0, a1, a2, a3...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo_mock.UpdateResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) error); ok {
		r1 = rf(a0, a1, a2, a3...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOne provides a mock function with given fields: a0, a1, a2, a3
func (_m *Collection) UpdateOne(a0 context.Context, a1, a2 interface{}, a3 ...*options.UpdateOptions) (*mongo_mock.UpdateResult, error) {
	return _m.UpdateMany(a0, a1, a2, a3...)
}

type mockConstructorTestingTNewCollection interface {
	mock.TestingT
	Cleanup(func())
}

// NewCollection creates a new instance of Collection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCollection(t mockConstructorTestingTNewCollection) *Collection {
	mock := &Collection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
