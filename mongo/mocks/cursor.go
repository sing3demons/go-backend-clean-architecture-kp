package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Cursor is an autogenerated mock type for the Cursor type
type Cursor struct {
	mock.Mock
}

// All provides a mock function with given fields: a0, a1
func (_m *Cursor) All(a0 context.Context, a1 interface{}) error {
	ret := _m.Called(a0, a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(a0, a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields: a0
func (_m *Cursor) Close(a0 context.Context) error {
	ret := _m.Called(a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Decode provides a mock function with given fields: a0
func (_m *Cursor) Decode(a0 interface{}) error {
	ret := _m.Called(a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Next provides a mock function with given fields: a0
func (_m *Cursor) Next(a0 context.Context) bool {
	ret := _m.Called(a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewCursor interface {
	mock.TestingT
	Cleanup(func())
}

// NewCursor creates a new instance of Cursor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCursor(t mockConstructorTestingTNewCursor) *Cursor {
	mock := &Cursor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
